/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Scorecard from "../../api/index";
import * as core from "../../core";

export const Span: core.serialization.ObjectSchema<serializers.Span.Raw, Scorecard.Span> = core.serialization.object({
    children: core.serialization.property(
        "Children",
        core.serialization.list(core.serialization.lazyObject(() => serializers.Span))
    ),
    timestamp: core.serialization.property("Timestamp", core.serialization.date()),
    traceId: core.serialization.property("TraceId", core.serialization.string()),
    spanId: core.serialization.property("SpanId", core.serialization.string()),
    parentSpanId: core.serialization.property("ParentSpanId", core.serialization.string()),
    traceState: core.serialization.property("TraceState", core.serialization.string()),
    spanName: core.serialization.property("SpanName", core.serialization.string()),
    spanKind: core.serialization.property("SpanKind", core.serialization.string()),
    serviceName: core.serialization.property("ServiceName", core.serialization.string()),
    resourceAttributes: core.serialization.property(
        "ResourceAttributes",
        core.serialization.record(core.serialization.string(), core.serialization.string())
    ),
    scopeName: core.serialization.property("ScopeName", core.serialization.string()),
    scopeVersion: core.serialization.property("ScopeVersion", core.serialization.string()),
    spanAttributes: core.serialization.property(
        "SpanAttributes",
        core.serialization.record(core.serialization.string(), core.serialization.string())
    ),
    duration: core.serialization.property("Duration", core.serialization.number()),
    statusCode: core.serialization.property("StatusCode", core.serialization.string()),
    statusMessage: core.serialization.property("StatusMessage", core.serialization.string()),
    eventsTimestamp: core.serialization.property(
        "Events.Timestamp",
        core.serialization.list(core.serialization.date())
    ),
    eventsName: core.serialization.property("Events.Name", core.serialization.list(core.serialization.string())),
    eventsAttributes: core.serialization.property(
        "Events.Attributes",
        core.serialization.list(core.serialization.record(core.serialization.string(), core.serialization.string()))
    ),
    linksTraceId: core.serialization.property("Links.TraceId", core.serialization.list(core.serialization.string())),
    linksSpanId: core.serialization.property("Links.SpanId", core.serialization.list(core.serialization.string())),
    linksTraceState: core.serialization.property(
        "Links.TraceState",
        core.serialization.list(core.serialization.string())
    ),
    linksAttributes: core.serialization.property(
        "Links.Attributes",
        core.serialization.list(core.serialization.record(core.serialization.string(), core.serialization.string()))
    ),
});

export declare namespace Span {
    interface Raw {
        Children: serializers.Span.Raw[];
        Timestamp: string;
        TraceId: string;
        SpanId: string;
        ParentSpanId: string;
        TraceState: string;
        SpanName: string;
        SpanKind: string;
        ServiceName: string;
        ResourceAttributes: Record<string, string>;
        ScopeName: string;
        ScopeVersion: string;
        SpanAttributes: Record<string, string>;
        Duration: number;
        StatusCode: string;
        StatusMessage: string;
        "Events.Timestamp": string[];
        "Events.Name": string[];
        "Events.Attributes": Record<string, string>[];
        "Links.TraceId": string[];
        "Links.SpanId": string[];
        "Links.TraceState": string[];
        "Links.Attributes": Record<string, string>[];
    }
}
