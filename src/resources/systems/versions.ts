// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class Versions extends APIResource {
  /**
   * Retrieve a specific system version by ID.
   *
   * @example
   * ```ts
   * const systemVersion = await client.systems.versions.get(
   *   '87654321-4d3b-4ae4-8c7a-4b6e2a19ccf0',
   * );
   * ```
   */
  get(systemVersionID: string, options?: RequestOptions): APIPromise<SystemVersion> {
    return this._client.get(path`/systems/versions/${systemVersionID}`, options);
  }

  /**
   * Create a new system version if it does not already exist. Does **not** set the
   * created version to be the system's production version.
   *
   * If there is already a system version with the same config, its name will be
   * updated.
   *
   * @example
   * ```ts
   * const systemVersion = await client.systems.versions.upsert(
   *   '12345678-0a8b-4f66-b6f3-2ddcfa097257',
   *   {
   *     config: {
   *       temperature: 0.5,
   *       maxTokens: 1024,
   *       model: 'gemini-2.0-flash',
   *     },
   *     name: 'Test model: Gemini',
   *   },
   * );
   * ```
   */
  upsert(systemID: string, body: VersionUpsertParams, options?: RequestOptions): APIPromise<SystemVersion> {
    return this._client.post(path`/systems/${systemID}/versions`, { body, ...options });
  }
}

/**
 * A SystemVersion defines the specific settings for a System Under Test.
 *
 * System versions contain parameter values that determine system behavior during
 * evaluation. They are immutable snapshots - once created, they never change.
 *
 * When running evaluations, you reference a specific systemVersionId to establish
 * which system version to test.
 */
export interface SystemVersion {
  /**
   * The ID of the system version.
   */
  id: string;

  /**
   * The configuration of the system version.
   */
  config: { [key: string]: unknown };

  /**
   * The name of the system version.
   */
  name: string;

  /**
   * The ID of the system the system version belongs to.
   */
  systemId: string;
}

export interface VersionUpsertParams {
  /**
   * The configuration of the system version.
   */
  config: { [key: string]: unknown };

  /**
   * The name of the system version. If creating a new system version and the name
   * isn't provided, it will be autogenerated.
   */
  name?: string;
}

export declare namespace Versions {
  export { type SystemVersion as SystemVersion, type VersionUpsertParams as VersionUpsertParams };
}
