// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../../resource';
import * as ScoreAPI from './score';
import { Grade, Score, ScoreCreateParams, ScoreUpdateParams } from './score';
import { APIPromise } from '../../../api-promise';
import { RequestOptions } from '../../../internal/request-options';
import { path } from '../../../internal/utils/path';

export class TestrecordResource extends APIResource {
  score: ScoreAPI.Score = new ScoreAPI.Score(this._client);

  /**
   * Create a new Testrecord
   */
  create(runID: number, body: TestrecordCreateParams, options?: RequestOptions): APIPromise<Testrecord> {
    return this._client.post(path`/v1/run/${runID}/testrecord`, { body, ...options });
  }

  /**
   * Retrieve Testrecord metadata
   */
  retrieve(
    testrecordID: number,
    params: TestrecordRetrieveParams,
    options?: RequestOptions,
  ): APIPromise<Testrecord> {
    const { run_id } = params;
    return this._client.get(path`/v1/run/${run_id}/testrecord/${testrecordID}`, options);
  }
}

export interface Testrecord {
  id?: number | null;

  /**
   * The context for the testrecord.
   */
  context?: string | null;

  /**
   * The creation date and time of the testrecord.
   */
  created_at?: string | null;

  custom_inputs?: Record<string, string | Testrecord.FileURL | Testrecord.JsonObjectOutput> | null;

  custom_labels?: Record<string, string | Testrecord.FileURL | Testrecord.JsonObjectOutput> | null;

  custom_outputs?: Record<string, string | Testrecord.FileURL | Testrecord.JsonObjectOutput> | null;

  /**
   * The error message for the testrecord.
   */
  error_message?: string | null;

  /**
   * The ideal response for the testrecord.
   */
  ideal?: string | null;

  /**
   * Debug information produced during the testrecord's generation.
   */
  model_debug_info?: Record<string, number | string> | null;

  /**
   * The model parameters used when generating the testrecord.
   */
  model_params?: Record<string, number | string> | null;

  /**
   * The actual response of the model for the testrecord.
   */
  model_response?: string | null;

  /**
   * The prompt used to generate the testrecord.
   */
  prompt?: string | null;

  /**
   * The ID of the run the testrecord belongs to.
   */
  run_id?: number | null;

  /**
   * The current status of the testrecord.
   */
  status?: string | null;

  /**
   * The ID of the testcase the testrecord belongs to.
   */
  testcase_id?: number | null;

  /**
   * The ID of the testset the testrecord belongs to.
   */
  testset_id?: number | null;

  /**
   * The user query for the testrecord.
   */
  user_query?: string | null;
}

export namespace Testrecord {
  /**
   * File model with url and name.
   */
  export interface FileURL {
    url: string;

    name?: string | null;
  }

  export interface JsonObjectOutput {
    /**
     * The value of the JSON object, which can be a dictionary, list, string, integer,
     * float, boolean, or None.
     */
    value: Record<string, unknown> | Array<unknown> | string | number | boolean | null;
  }

  /**
   * File model with url and name.
   */
  export interface FileURL {
    url: string;

    name?: string | null;
  }

  export interface JsonObjectOutput {
    /**
     * The value of the JSON object, which can be a dictionary, list, string, integer,
     * float, boolean, or None.
     */
    value: Record<string, unknown> | Array<unknown> | string | number | boolean | null;
  }

  /**
   * File model with url and name.
   */
  export interface FileURL {
    url: string;

    name?: string | null;
  }

  export interface JsonObjectOutput {
    /**
     * The value of the JSON object, which can be a dictionary, list, string, integer,
     * float, boolean, or None.
     */
    value: Record<string, unknown> | Array<unknown> | string | number | boolean | null;
  }
}

export interface TestrecordCreateParams {
  /**
   * The context that was used while generating the testrecord.
   */
  context?: string | null;

  custom_inputs?: Record<
    string,
    string | TestrecordCreateParams.FileURL | TestrecordCreateParams.JsonObjectInput
  > | null;

  custom_labels?: Record<
    string,
    string | TestrecordCreateParams.FileURL | TestrecordCreateParams.JsonObjectInput
  > | null;

  custom_outputs?: Record<
    string,
    string | TestrecordCreateParams.FileURL | TestrecordCreateParams.JsonObjectInput
  > | null;

  /**
   * The error message for the testrecord.
   */
  error_message?: string | null;

  /**
   * The ideal response.
   */
  ideal?: string | null;

  /**
   * Debug information generated by Scorecard during the execution of the testrecord.
   */
  model_debug_info?: Record<string, number | string> | null;

  /**
   * The model parameters used to generate the response.
   */
  model_params?: Record<string, number | string> | null;

  /**
   * The prompt used to generate the response.
   */
  prompt?: string | null;

  /**
   * The response generated by the model.
   */
  response?: string | null;

  testcase_id?: number | null;

  testset_id?: number | null;

  /**
   * The user query that was executed for the testrecord.
   */
  user_query?: string | null;
}

export namespace TestrecordCreateParams {
  /**
   * File model with url and name.
   */
  export interface FileURL {
    url: string;

    name?: string | null;
  }

  export interface JsonObjectInput {
    /**
     * The value of the JSON object, which can be a dictionary, list, string, integer,
     * float, boolean, or None.
     */
    value: Record<string, unknown> | Array<unknown> | string | number | boolean | null;
  }

  /**
   * File model with url and name.
   */
  export interface FileURL {
    url: string;

    name?: string | null;
  }

  export interface JsonObjectInput {
    /**
     * The value of the JSON object, which can be a dictionary, list, string, integer,
     * float, boolean, or None.
     */
    value: Record<string, unknown> | Array<unknown> | string | number | boolean | null;
  }

  /**
   * File model with url and name.
   */
  export interface FileURL {
    url: string;

    name?: string | null;
  }

  export interface JsonObjectInput {
    /**
     * The value of the JSON object, which can be a dictionary, list, string, integer,
     * float, boolean, or None.
     */
    value: Record<string, unknown> | Array<unknown> | string | number | boolean | null;
  }
}

export interface TestrecordRetrieveParams {
  run_id: number;
}

TestrecordResource.Score = Score;

export declare namespace TestrecordResource {
  export {
    type Testrecord as Testrecord,
    type TestrecordCreateParams as TestrecordCreateParams,
    type TestrecordRetrieveParams as TestrecordRetrieveParams,
  };

  export {
    Score as Score,
    type Grade as Grade,
    type ScoreCreateParams as ScoreCreateParams,
    type ScoreUpdateParams as ScoreUpdateParams,
  };
}
