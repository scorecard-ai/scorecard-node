// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { asTextContentResult } from 'scorecard-ai-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import type { Metadata } from '../../';
import Scorecard from 'scorecard-ai';

export const metadata: Metadata = {
  resource: 'systems.versions',
  operation: 'write',
  tags: [],
  httpMethod: 'post',
  httpPath: '/systems/{systemId}/versions',
  operationId: 'upsertSystemVersion',
};

export const tool: Tool = {
  name: 'upsert_systems_versions',
  description:
    "Create a new system version if it does not already exist. Does **not** set the created version to be the system's production version.\n\nIf there is already a system version with the same config, its name will be updated.",
  inputSchema: {
    type: 'object',
    properties: {
      systemId: {
        type: 'string',
      },
      config: {
        type: 'object',
        description: 'The configuration of the system version.',
      },
      name: {
        type: 'string',
        description:
          "The name of the system version. If creating a new system version and the name isn't provided, it will be autogenerated.",
      },
    },
  },
};

export const handler = async (client: Scorecard, args: Record<string, unknown> | undefined) => {
  const { systemId, ...body } = args as any;
  return asTextContentResult(await client.systems.versions.upsert(systemId, body));
};

export default { metadata, tool, handler };
